#include <stdio.h>
#include <stdlib.h>
struct Process {
 int processID; 
 int burstTime; 
 int remainingTime; 
 int arrivalTime; 
 int waitingTime; 
 int turnaroundTime; 
};
void findWaitingTime(struct Process *processes, int n, int
timeQuantum) {
 int *remainingTime = (int *)malloc(n * sizeof(int));
 int *flag = (int *)malloc(n * sizeof(int));
 for (int i = 0; i < n; i++) {
 remainingTime[i] = processes[i].burstTime;
 flag[i] = 0;
 }
 int complete = 0;
 int currentTime = 0;
 while (complete < n) {
 int flagDone = 1;
 for (int i = 0; i < n; i++) {
 if (processes[i].arrivalTime <= currentTime &&
remainingTime[i] > 0) {
 flagDone = 0;
 if (remainingTime[i] > timeQuantum) {
 currentTime += timeQuantum;
 remainingTime[i] -= timeQuantum;
 } else {
 currentTime += remainingTime[i];
 processes[i].waitingTime = currentTime -
processes[i].arrivalTime - processes[i].burstTime;
 remainingTime[i] = 0;
 complete++;
flag[i] = 1;
 }
 }
 }
 if (flagDone) {
 currentTime++;
 }
 }
 free(remainingTime);
 free(flag);
}
void findTurnaroundTime(struct Process *processes, int n) {
 for (int i = 0; i < n; i++) {
 processes[i].turnaroundTime = processes[i].burstTime +
processes[i].waitingTime;
 }
}
void findAverageTime(struct Process *processes, int n, int
timeQuantum) {
 int totalWaitingTime = 0;
 int totalTurnaroundTime = 0;
 findWaitingTime(processes, n, timeQuantum);
 findTurnaroundTime(processes, n);
 for (int i = 0; i < n; i++) {
 totalWaitingTime += processes[i].waitingTime;
 totalTurnaroundTime += processes[i].turnaroundTime;
 }
 float averageWaitingTime = (float)totalWaitingTime / n;
 float averageTurnaroundTime = (float)totalTurnaroundTime / n;
 printf("Average Waiting Time: %.2f\n", averageWaitingTime);
 printf("Average Turnaround Time: %.2f\n", 
averageTurnaroundTime);
}
int main() {
 int n, timeQuantum;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 printf("Enter the time quantum: ");
 scanf("%d", &timeQuantum);
 struct Process *processes = (struct Process *)malloc(n *
sizeof(struct Process));
 printf("Enter arrival time and burst time for each process:
\n");
 for (int i = 0; i < n; i++) {
 processes[i].processID = i + 1;
 scanf("%d %d", &processes[i].arrivalTime, 
&processes[i].burstTime);
 processes[i].remainingTime = processes[i].burstTime;
 }
 findAverageTime(processes, n, timeQuantum);
 free(processes);
 return 0;
}