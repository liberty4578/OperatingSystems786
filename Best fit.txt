#include <stdio.h>
// Function to allocate memory using Best Fit algorithm
void bestFit(int blockSize[], int m, int processSize[], int n) {
 int allocation[n];
 
 // Initialize all allocations as -1
 for (int i = 0; i < n; i++)
 allocation[i] = -1;
 
 // Iterate through each process and find the best fit block
 for (int i = 0; i < n; i++) {
 int bestIndex = -1;
 for (int j = 0; j < m; j++) {
 if (blockSize[j] >= processSize[i]) {
 if (bestIndex == -1 || blockSize[j] <
blockSize[bestIndex])
 bestIndex = j;
 }
 }
 
 // If we could find a block for the current process
 if (bestIndex != -1) {
 allocation[i] = bestIndex;
 blockSize[bestIndex] -= processSize[i];
 }
 }
 
 printf("\nProcess No.\tProcess Size\tBlock No.\n");
 for (int i = 0; i < n; i++) {
 printf("%d\t\t%d\t\t", i + 1, processSize[i]);
 if (allocation[i] != -1)
 printf("%d\n", allocation[i] + 1);
 else
 printf("Not Allocated\n");
 }
}
int main() {
 int m; // Number of memory blocks
 int n; // Number of processes
 printf("Enter the number of memory blocks: ");
 scanf("%d", &m);
 int blockSize[m];
 printf("Enter the size of each memory block:\n");
 for (int i = 0; i < m; i++) {
 scanf("%d", &blockSize[i]);
 }
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 int processSize[n];
 printf("Enter the size of each process:\n");
 for (int i = 0; i < n; i++) {
 scanf("%d", &processSize[i]);
 }
 bestFit(blockSize, m, processSize, n);
 return 0;
}