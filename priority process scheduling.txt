#include <stdio.h>
#include <stdlib.h>
#include<limits.h>
struct Process {
 int processID;
 int arrivalTime; 
 int burstTime; 
 int priority; 
 int waitingTime; 
 int turnaroundTime; 
};
void findWaitingTime(struct Process *processes, int n) {
 int *remainingTime = (int *)malloc(n * sizeof(int));
 for (int i = 0; i < n; i++) {
 remainingTime[i] = processes[i].burstTime;
 }
 int complete = 0;
 int currentTime = 0;
 while (complete < n) {
 int highestPriorityProcess = -1;
 int highestPriority = INT_MAX;
 for (int i = 0; i < n; i++) {
 if (processes[i].arrivalTime <= currentTime &&
processes[i].priority < highestPriority && remainingTime[i] > 0) {
 highestPriorityProcess = i;
 highestPriority = processes[i].priority;
 }
 }
 if (highestPriorityProcess == -1) {
 currentTime++;
 continue;
 }
 processes[highestPriorityProcess].waitingTime =
currentTime - processes[highestPriorityProcess].arrivalTime;
 currentTime += remainingTime[highestPriorityProcess];
 remainingTime[highestPriorityProcess] = 0;
 complete++;
 }
 free(remainingTime);
}
void findTurnaroundTime(struct Process *processes, int n) {
 for (int i = 0; i < n; i++) {
 processes[i].turnaroundTime = processes[i].burstTime +
processes[i].waitingTime;
 }
}
void findAverageTime(struct Process *processes, int n) {
 int totalWaitingTime = 0;
 int totalTurnaroundTime = 0;
 findWaitingTime(processes, n);
 findTurnaroundTime(processes, n);
 for (int i = 0; i < n; i++) {
 totalWaitingTime += processes[i].waitingTime;
 totalTurnaroundTime += processes[i].turnaroundTime;
 }
 float averageWaitingTime = (float)totalWaitingTime / n;
 float averageTurnaroundTime = (float)totalTurnaroundTime / n;
 printf("Average Waiting Time: %.2f\n", averageWaitingTime);
 printf("Average Turnaround Time: %.2f\n", 
averageTurnaroundTime);
}
int main() {
 int n;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 struct Process *processes = (struct Process *)malloc(n *
sizeof(struct Process));
 printf("Enter arrival time, burst time, and priority for each 
process:\n");
 for (int i = 0; i < n; i++) {
 processes[i].processID = i + 1;
 scanf("%d %d %d", &processes[i].arrivalTime, 
&processes[i].burstTime, &processes[i].priority);
 }
 findAverageTime(processes, n);
 free(processes);
 return 0;
}